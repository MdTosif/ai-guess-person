"use client";
import React, { useState } from "react";
import ReactMarkdown from "react-markdown";
import { useFieldArray, useForm, UseFormReturn } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  Form,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter,
} from "@/components/ui/card";
import { slugify } from "@/lib/utils";
import { apiData } from "./_helper/data";
import { formSchema } from "@/lib/schema";

const schema = formSchema;

// Combined schema for final validation (all steps)
// const finalSchema = step1Schema.merge(step2Schema);
type SchemaType = z.infer<typeof schema>;

export default function MultiStepForm() {
  const [step, setStep] = useState(0);
  const [apiRes, setApiRes] = useState<{ message: string; data: string }>();

  // Initialize form for Step 1
  const form = useForm<SchemaType>({
    resolver: zodResolver(schema),
    mode: "onChange",
  });

  const { handleSubmit, control } = form;

  // Manage the fields array
  const { fields, append } = useFieldArray({
    control,
    name: "qna", // The name of the field array
  });

  // On form submission, advance to the next step or submit
  const onSubmit = async (data: SchemaType) => {
    if (step < apiData.length) {
      append({
        question: apiData[step]?.q,
        answer: "",
        options: apiData[step].a,
      });

      setStep(step + 1); // Move to Step 2
    } else {
      console.log("Final Form Data:", data);
      // Submit final form data
      const res = await fetch("http://localhost:3000/generate", {
        method: "POST",
        body: JSON.stringify(data),
      });
      const body = await res.json();
      setApiRes(body);
    }
  };

  return (
    <Card className="m-auto md:w-1/2 lg:w-1/3">
      {apiRes ? (
        <>
          <CardHeader>
            <CardTitle>
              <span className="text-secondary-foreground">
                {`${form.watch("name").toString()}`}
              </span>
              &apos;s Anime Character Personality Match
            </CardTitle>
            <CardDescription>
              Generated by AI, apologize for any mistakes.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <ReactMarkdown>{apiRes.data}</ReactMarkdown>
          </CardContent>
          <CardFooter></CardFooter>
        </>
      ) : (
        <Form {...form}>
          <form onSubmit={handleSubmit(onSubmit)} className="w-full">
            <CardHeader>
              <CardTitle>Card Title</CardTitle>
              <CardDescription>Card Description</CardDescription>
            </CardHeader>
            <CardContent>
              {/* Step 1 */}
              {step === 0 && (
                <>
                  <h2>Step 1: Personal Information</h2>
                  <FormField
                    control={form.control}
                    name="name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Name</FormLabel>
                        <FormControl>
                          <Input placeholder="Enter your name" {...field} />
                        </FormControl>
                        <FormDescription>
                          This is your public display name.
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </>
              )}

              {fields.map((field, index) => (
                <div key={field.id}>
                  {step === index + 1 && RadioFormOptions(form, index)}
                </div>
              ))}
              {/* Step 2 */}
            </CardContent>
            <CardFooter>
              <div className="grid grid-cols-12 gap-3">
                {step !== 0 && (
                  <Button
                    className="col-span-12 md:col-span-6"
                    type="button"
                    onClick={() => setStep(step - 1)}
                  >
                    Back
                  </Button>
                )}
                <Button className="col-span-12 md:col-span-6" type="submit">
                  Submit
                </Button>
              </div>
            </CardFooter>
          </form>
        </Form>
      )}
    </Card>
  );
}

function RadioFormOptions(
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  form: UseFormReturn<SchemaType, any, undefined>,
  index: number
): React.ReactNode {
  return (
    <>
      <h2>Answer the question</h2>
      <FormField
        control={form.control}
        name={`qna.${index}.answer`}
        render={({ field }) => (
          <FormItem className="space-y-3">
            <FormLabel>{apiData?.[index]?.q}</FormLabel>
            <FormControl>
              <RadioGroup
                onValueChange={field.onChange}
                defaultValue={field.value}
                className="flex flex-col space-y-1"
              >
                {apiData?.[index]?.a.map((e) => (
                  <FormItem
                    key={slugify(e)}
                    className="flex items-center space-x-3 space-y-0"
                  >
                    <FormControl>
                      <RadioGroupItem value={e} />
                    </FormControl>
                    <FormLabel className="font-normal">{e}</FormLabel>
                  </FormItem>
                ))}
              </RadioGroup>
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
    </>
  );
}
